Written down thoughts to remember stuff:

- test build with c++17 again now that dependencies are properly made
- THEN change to use c++20
- added assets from bamboo release file for testing - must make it seperate download in the future

- must figure out how to create editor executable seperate from user developer code
- must figure out how to update models in editor, through another program 
- must figure out how to contain an ENTIRE scene inside of a container of some kind (like zip or something)
- For example, show what the model looks like in-game with the editor, but then change it with blender, and once the file changes, the editor updates the model
- use blender to create very simple test assets
- samples from here as well: https://github.com/KhronosGroup/glTF-Sample-Assets/blob/main/Models/Models.md


- editor/simulation/simulation_ui is where we call the sky texture
- asset_manager.h also is where DEFAULT_TEXTURE_CUBE_URL which has the tex and texc file calls
- config folder has a .yaml file that controls locations of the default world
- filter_cube_pass.cpp calls for default cube static mesh

- consider adding https://github.com/KhronosGroup/glTF-IBL-Sampler later
- engine was supposed to generate bdrf, but never got the chance due to bdrf not existing (I believe that was a bug)

- VALVE'S FOSSILIZE IS GOOD: https://github.com/ValveSoftware/Fossilize

- Create hash when serializing model or textures, then compare that hash with a new hash when you make edits to the model file
- Wait a minute, the current serialization system is amazing, the only problem being that it is inflexible
- The only changes needing to be made is to just save the name path of the original model/texture 
- Then combine together for exporting

- Entity
    - Component 1
    - Component 2

- Add more functionality to editor GUI 
- Must create a variable for assets to store original file names (like *.gltf, *.glb, *.png, e.t.c) 
- Then create an export function that packages together assets from the original file type
- Test and then finally package together 0.1.0

- Json
    - Name of original asset (.glb, or .png, e.t.c) 
    - All paths to serialized assets of model/texture
    - when we need to export, we just open all of the assets and then make the appropriate file





- You want a folder with 6 images (.exr, .png, .jpg, .e.tc...)

FOR GENERATING DEFAULT SKYBOX - DO INSIDE FOLDER
ktx create --format R16G16B16A16_SFLOAT --generate-mipmap --cubemap *.exr cloudy.ktx
ktx create --format R8G8B8A8_SRGB --generate-mipmap --cubemap *.png cloudy.ktx