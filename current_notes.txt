Written down thoughts to remember stuff:

- test build with c++17 again now that dependencies are properly made
- THEN change to use c++20
- added assets from bamboo release file for testing - must make it seperate download in the future
- must convert glfw code to sdl2
- must figure out how to create editor executable seperate from user developer code
- must figure out how to update models in editor, through another program 
- must figure out how to contain an ENTIRE scene inside of a container of some kind (like zip or something)
- For example, show what the model looks like in-game with the editor, but then change it with blender, and once the file changes, the editor updates the model


- Now that managed to get the empty.world to work, I now need to work on the basic.world
- Check tomorrow if imgui code works the same for sdl2 and glfw
- If so, work on glfw version first, then convert to sdl2 after gui is more serviceable
- Also, create a function that rebuilds default assets all at once, in case there are some major code changes 


- editor/simulation/simulation_ui is where we call the sky texture
- asset_manager.h also is where DEFAULT_TEXTURE_CUBE_URL which has the tex and texc file calls
- config folder has a .yaml file that controls locations of the default world

- consider adding https://github.com/KhronosGroup/glTF-IBL-Sampler later
- engine was supposed to generate bdrf, but never got the chance due to bdrf not existing (I believe that was a bug)

- Engine should not be serializing everything in the editor
- Serializing everthing is the solution for max efficiency, but for editing, Im not sure
- Create hash when serializing model or textures, then compare that hash with a new hash when you make edits to the model file

- VALVE'S FOSSILIZE IS GOOD: https://github.com/ValveSoftware/Fossilize

- Wait a minute, the current serialization system is amazing, the only problem being that it is inflexible
- The only changes needing to be made is to just save the path name of the model/texture entity (along with changes), and then it re-loads it from scratch
- The custom serialization where even the base models are processed will come into play once the game is just about ready to ship out


- Engine imports assets first, then user has to attach them to entity
- Good idea, except very inflexible for keeping as .glb models or .gltf

- Entity
    - Components 
        - 





- You want a folder with 6 images (.exr, .png, .jpg, .e.tc...)

FOR GENERATING DEFAULT SKYBOX - DO INSIDE FOLDER
ktx create --format R16G16B16A16_SFLOAT --generate-mipmap --cubemap *.exr cloudy.ktx
ktx create --format R8G8B8A8_SRGB --generate-mipmap --cubemap *.png cloudy.ktx