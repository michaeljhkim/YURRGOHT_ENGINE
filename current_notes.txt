- test build with c++17 again now that dependencies are properly made
- THEN change to use c++20
- added assets from bamboo release file for testing - must make it seperate download in the future
- must convert glfw code to sdl2
- must figure out how to create editor executable seperate from user developer code
- must figure out how to update models in editor, through another program 
- must figure out how to contain an ENTIRE scene inside of a container of some kind (like zip or something)
- For example, show what the model looks like in-game with the editor, but then change it with blender, and once the file changes, the editor updates the model


- Now that managed to get the empty.world to work, I now need to work on the basic.world
- Check tomorrow if imgui code works the same for sdl2 and glfw
- If so, work on glfw version first, then convert to sdl2 after gui is more serviceable
- Also, create a function that rebuilds default assets all at once, in case there are some major code changes 


- editor/simulation/simulation_ui is where we call the sky texture
- asset_manager.h also is where DEFAULT_TEXTURE_CUBE_URL which has the tex and texc file calls
- config folder has a .yaml file that controls locations of the default world

- consider adding https://github.com/KhronosGroup/glTF-IBL-Sampler later
- engine was supposed to generate bdrf, but never got the chance due to bdrf not existing (I believe that was a bug)

- Engine should not be serializing everything in the editor
- Change so that the editor only saves which model it used, and the variables
- Perhaps serialize everything but the class somehow?
- For example, when a texture or model inflates, it just opens the model and texture files
- Serializing everthing is the solution for max efficiency, but for editing, Im not sure
- Create hash when serializing model or textures, then compare that hash with a new hash when you make edits to the model file






- You want a folder with 6 images (.exr, .png, .jpg, .e.tc...)

FOR GENERATING DEFAULT SKYBOX - DO INSIDE FOLDER
ktx create --format R16G16B16A16_SFLOAT --generate-mipmap --cubemap *.exr cloudy.ktx
ktx create --format R8G8B8A8_SRGB --generate-mipmap --cubemap *.png cloudy.ktx


CURRENT CMDLINE ERROR OUTPUT:

sudo ./Test
error: XDG_RUNTIME_DIR is invalid or not set in the environment.
[info] [pickPhysicalDevice] Device[0]: NVIDIA GeForce GTX 1070 Ti DISCRETE_GPU 1.3.242
[info] [pickPhysicalDevice] Device[1]: llvmpipe (LLVM 15.0.6, 256 bits) CPU 1.3.230
[info] [pickPhysicalDevice] Selected device: NVIDIA GeForce GTX 1070 Ti DISCRETE_GPU 1.3.242
Present mode: V-Sync
WorldManager initializing
loadWorld - loading asset/engine/world/basic.world
PROBLEM TEXTURE: ./asset/engine/world/basic.world
Json
World initializing
terminate called after throwing an instance of 'cereal::Exception'
  what():  JSON Parsing failed - provided NVP (asset_ref) not found
Aborted
