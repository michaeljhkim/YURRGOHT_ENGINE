Written down thoughts to remember stuff:

- test build with c++17 again now that dependencies are properly made
- THEN change to use c++20
- added assets from bamboo release file for testing - must make it seperate download in the future

- must figure out how to create editor executable seperate from user developer code
- must figure out how to update models in editor, through another program 
- must figure out how to contain an ENTIRE scene inside of a container of some kind (like zip or something)
- For example, show what the model looks like in-game with the editor, but then change it with blender, and once the file changes, the editor updates the model
- use blender to create very simple test assets
- samples from here as well: https://github.com/KhronosGroup/glTF-Sample-Assets/blob/main/Models/Models.md


- editor/simulation/simulation_ui is where we call the sky texture
- asset_manager.h also is where DEFAULT_TEXTURE_CUBE_URL which has the tex and texc file calls
- config folder has a .yaml file that controls locations of the default world
- filter_cube_pass.cpp calls for default cube static mesh

- consider adding https://github.com/KhronosGroup/glTF-IBL-Sampler later
- engine was supposed to generate bdrf, but never got the chance due to bdrf not existing (I believe that was a bug)

- VALVE'S FOSSILIZE IS GOOD: https://github.com/ValveSoftware/Fossilize

- Create hash when serializing model or textures, then compare that hash with a new hash when you make edits to the model file
- Wait a minute, the current serialization system is amazing, the only problem being that it is inflexible
- The only changes needing to be made is to just save the name path of the original model/texture 
- Then combine together for exporting

- Entity
    - Component 1
    - Component 2

- Add more functionality to editor GUI 
- Must create a variable for assets to store original file names (like *.gltf, *.glb, *.png, e.t.c) 
- Then create an export function that packages together assets from the original file type
- Test and then finally package together 0.1.0

- Json
    - Name of original asset (.glb, or .png, e.t.c) 
    - All paths to serialized assets of model/texture
    - when we need to export, we just open all of the assets and then make the appropriate file

- C# as a technically scripting language - need to compile, but compiles very fast

- Allow importing or adding of assets/files into the engine without drag and drop (spawns item in default (0.0f, 0.0f, .0f))
- unless there is already an item, in that case it will spawn on top of the existing item, with the highest vertex as a reference

- IMGUI COLORS ARE TOO BRIGHT BECAUSE OF SHADERS
- IMGUI VULKAN uses a differently labelled shader values (which I added instructions for in this project in case I forget)
- Not sure if bamboo engine modified IMGUI with this shader or if IMGUI originally had this and changed it 
- must check later (probably the former though)
- compare IMGUI vulkan shader code to the one in bamboo to see if there were changes
- due to imgui changes, document code soon

- figure out how to use that shader code without modifying IMGUI vulkan (if possible) 
- also considering changing imguizmo to show the axis stuff all the time? I mean, current system is still theoretically better since less clutter

- PRIORITY IS EXPORT OPTIONS
- After that, ADD C#

- NOTE: property_ui should be providing an option to attach a component, the problem being that one of the main reasons to do so would be to attach scripts, which I do not have rn
- It might finally be time to do so tomorrow
- Remember to create template C# code so that they can start with something

- Must create hash for each model or texture. That way, I can make edits to each thing in something like gimp or blender, and then the program will auto update the model in the editor. 
- Editor will check if the hash for an asset is different, and if so, it will import and update
- Editor mode will also keep track of the original assets


- change things so that all libraries linked to executable are now linked to another library .so file, and the new executable links to that
- DOCUMENT SUBMODULES AND FORKS AND ESPECIALLY REASONING
- ALSO FOR DOCUMENTATION, GO THROUGH A BRIEF OVERVIEW OF WHAT HAPPENS WHEN STARTING UP THE APPLICATION
- TAKE ABOUT INSTANCES OF CERTAIN SYSTEMS BEING STARTED AND SUCH
- ESPECIALLY QUIRKS IN CERTAIN CLASSES OR TYPES THAT MIGHT TRIP UP A NEW USER
- as in it tripped up me when I STARTED
- especially explain reflection and serialization AND the problems I had starting out with those
- and how changing things up might break things and how to avoid that

- create a history for simulation_ui transformations (like the directory history for asset_ui)
- manually add CRTL+Z in order to go back in transformation history
- CRTL+Y for forward in transformation history

- try to add dotnet build thing here into cmake
- When developers attach a script to an entity, it will come with a template
- There will be a "main" function (not named main) that cs_interface will automatically look for
- This "main" is where all of the real action occurs

- figure out how to move child windows vertically in properties


- now that property_ui layout has been figured out for the most part, it is time to finally work on attach/remove component
- when attach option selected, a popup will come up with all built-in components (maybe even some hover text)
- when remove option selected, a popup will come up asking if the user is sure (checkbox will be added somewhere to turn this off maybe)

- There should be 2 more options for attaching/removing scripts
- maybe user will also be able to attach scripts through the asset_ui
- user will for certain be able to navigate file system and find the appropriate .cs file


- basic Component Manager is just about done (still not sure if I should keep button in tree headers to remove components)
- remember to add a way to move components around in the property_ui windows
- remember to add a way to store values and such from a removed component 
    - basically when user removes a component, values are remembered
    - so if a component is removed by accident, the values can be brought back
    - if this feature does get added, then the option to reset values must also be added
- remember to add a way to push selected components at the bottom of the popup after changing it previously
- Add method of changing the name of entity
    - add a button that leads to a tiny popup that just has an input textbox thing
    - entity class now has a function that changes the name of the entity
- menubar location is not optimal, but I don't think there's anything I can do at the moment

- Adding script is now on the docket
- Perhaps borrow the way asset_ui handles folders, how it shows where the files are and such


- Engine render tick function
- runs the tick() function in render_system.cpp
    - this tick() function then runs the collectRenderDatas() function which collects render data 
    - after finishing this, it runs the render() function belonging to vulkan_rhi.cpp
- most important part of that function is that it runs the recordFrame() function
    - recordFrame() in vulkan_rhi.cpp raises a flag to the event listener which activates the onRecordFrame() function in render_system.cpp

- create new pipeline inside of main pass for the grid shaders
- modify collectRenderDatas to collect data for grid

- IDEA: give grid.vert a couple more outputs, the values that would makeup the y-axis
    - then modify the grid.frag to output the y-axis
- for now work on "add script" option, more immediate



# cs-script - release install
RUN dotnet add package CS-Script --version 4.8.27

dotnet build -o ../../../../../build/source/scripting/cs_interface
    
    

- You want a folder with 6 images (.exr, .png, .jpg, .e.tc...)
FOR GENERATING DEFAULT SKYBOX - DO INSIDE FOLDER
ktx create --format R16G16B16A16_SFLOAT --generate-mipmap --cubemap *.exr cloudy.ktx
ktx create --format R8G8B8A8_SRGB --generate-mipmap --cubemap *.png cloudy.ktx